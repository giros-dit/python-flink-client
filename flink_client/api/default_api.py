"""
    Flink JobManager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1/1.15-SNAPSHOT
    Contact: user@flink.apache.org
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from flink_client.api_client import ApiClient, Endpoint as _Endpoint
from flink_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from flink_client.model.asynchronous_operation_result import AsynchronousOperationResult
from flink_client.model.checkpoint_config_info import CheckpointConfigInfo
from flink_client.model.checkpoint_statistics import CheckpointStatistics
from flink_client.model.checkpointing_statistics import CheckpointingStatistics
from flink_client.model.cluster_configuration_info_entry import ClusterConfigurationInfoEntry
from flink_client.model.cluster_data_set_list_response_body import ClusterDataSetListResponseBody
from flink_client.model.cluster_overview_with_version import ClusterOverviewWithVersion
from flink_client.model.dashboard_configuration import DashboardConfiguration
from flink_client.model.jar_list_info import JarListInfo
from flink_client.model.jar_plan_request_body import JarPlanRequestBody
from flink_client.model.jar_run_request_body import JarRunRequestBody
from flink_client.model.jar_run_response_body import JarRunResponseBody
from flink_client.model.jar_upload_response_body import JarUploadResponseBody
from flink_client.model.job_accumulators_info import JobAccumulatorsInfo
from flink_client.model.job_config_info import JobConfigInfo
from flink_client.model.job_details_info import JobDetailsInfo
from flink_client.model.job_exceptions_info_with_history import JobExceptionsInfoWithHistory
from flink_client.model.job_execution_result_response_body import JobExecutionResultResponseBody
from flink_client.model.job_ids_with_status_overview import JobIdsWithStatusOverview
from flink_client.model.job_plan_info import JobPlanInfo
from flink_client.model.job_submit_request_body import JobSubmitRequestBody
from flink_client.model.job_submit_response_body import JobSubmitResponseBody
from flink_client.model.job_vertex_accumulators_info import JobVertexAccumulatorsInfo
from flink_client.model.job_vertex_back_pressure_info import JobVertexBackPressureInfo
from flink_client.model.job_vertex_details_info import JobVertexDetailsInfo
from flink_client.model.job_vertex_flame_graph import JobVertexFlameGraph
from flink_client.model.job_vertex_task_managers_info import JobVertexTaskManagersInfo
from flink_client.model.log_list_info import LogListInfo
from flink_client.model.metric_collection_response_body import MetricCollectionResponseBody
from flink_client.model.multiple_jobs_details import MultipleJobsDetails
from flink_client.model.savepoint_disposal_request import SavepointDisposalRequest
from flink_client.model.savepoint_trigger_request_body import SavepointTriggerRequestBody
from flink_client.model.stop_with_savepoint_request_body import StopWithSavepointRequestBody
from flink_client.model.subtask_execution_attempt_accumulators_info import SubtaskExecutionAttemptAccumulatorsInfo
from flink_client.model.subtask_execution_attempt_details_info import SubtaskExecutionAttemptDetailsInfo
from flink_client.model.subtasks_all_accumulators_info import SubtasksAllAccumulatorsInfo
from flink_client.model.subtasks_times_info import SubtasksTimesInfo
from flink_client.model.task_checkpoint_statistics_with_subtask_details import TaskCheckpointStatisticsWithSubtaskDetails
from flink_client.model.task_manager_details_info import TaskManagerDetailsInfo
from flink_client.model.task_managers_info import TaskManagersInfo
from flink_client.model.thread_dump_info import ThreadDumpInfo
from flink_client.model.trigger_response import TriggerResponse


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.cluster_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/cluster',
                'operation_id': 'cluster_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.config_get_endpoint = _Endpoint(
            settings={
                'response_type': (DashboardConfiguration,),
                'auth': [],
                'endpoint_path': '/config',
                'operation_id': 'config_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.datasets_datasetid_delete_endpoint = _Endpoint(
            settings={
                'response_type': (TriggerResponse,),
                'auth': [],
                'endpoint_path': '/datasets/{datasetid}',
                'operation_id': 'datasets_datasetid_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasetid',
                ],
                'required': [
                    'datasetid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'datasetid',
                ]
            },
            root_map={
                'validations': {
                    ('datasetid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'datasetid':
                        (str,),
                },
                'attribute_map': {
                    'datasetid': 'datasetid',
                },
                'location_map': {
                    'datasetid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.datasets_delete_triggerid_get_endpoint = _Endpoint(
            settings={
                'response_type': (AsynchronousOperationResult,),
                'auth': [],
                'endpoint_path': '/datasets/delete/{triggerid}',
                'operation_id': 'datasets_delete_triggerid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'triggerid',
                ],
                'required': [
                    'triggerid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'triggerid',
                ]
            },
            root_map={
                'validations': {
                    ('triggerid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'triggerid':
                        (str,),
                },
                'attribute_map': {
                    'triggerid': 'triggerid',
                },
                'location_map': {
                    'triggerid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.datasets_get_endpoint = _Endpoint(
            settings={
                'response_type': (ClusterDataSetListResponseBody,),
                'auth': [],
                'endpoint_path': '/datasets',
                'operation_id': 'datasets_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jars_get_endpoint = _Endpoint(
            settings={
                'response_type': (JarListInfo,),
                'auth': [],
                'endpoint_path': '/jars',
                'operation_id': 'jars_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jars_jarid_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/jars/{jarid}',
                'operation_id': 'jars_jarid_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'jarid',
                ],
                'required': [
                    'jarid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jarid':
                        (str,),
                },
                'attribute_map': {
                    'jarid': 'jarid',
                },
                'location_map': {
                    'jarid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jars_jarid_plan_get_endpoint = _Endpoint(
            settings={
                'response_type': (JobPlanInfo,),
                'auth': [],
                'endpoint_path': '/jars/{jarid}/plan',
                'operation_id': 'jars_jarid_plan_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jarid',
                    'program_args',
                    'program_arg',
                    'entry_class',
                    'parallelism',
                ],
                'required': [
                    'jarid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jarid':
                        (str,),
                    'program_args':
                        (str,),
                    'program_arg':
                        (str,),
                    'entry_class':
                        (str,),
                    'parallelism':
                        (int,),
                },
                'attribute_map': {
                    'jarid': 'jarid',
                    'program_args': 'program-args',
                    'program_arg': 'programArg',
                    'entry_class': 'entry-class',
                    'parallelism': 'parallelism',
                },
                'location_map': {
                    'jarid': 'path',
                    'program_args': 'query',
                    'program_arg': 'query',
                    'entry_class': 'query',
                    'parallelism': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jars_jarid_plan_post_endpoint = _Endpoint(
            settings={
                'response_type': (JobPlanInfo,),
                'auth': [],
                'endpoint_path': '/jars/{jarid}/plan',
                'operation_id': 'jars_jarid_plan_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'jarid',
                    'program_args',
                    'program_arg',
                    'entry_class',
                    'parallelism',
                    'jar_plan_request_body',
                ],
                'required': [
                    'jarid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jarid':
                        (str,),
                    'program_args':
                        (str,),
                    'program_arg':
                        (str,),
                    'entry_class':
                        (str,),
                    'parallelism':
                        (int,),
                    'jar_plan_request_body':
                        (JarPlanRequestBody,),
                },
                'attribute_map': {
                    'jarid': 'jarid',
                    'program_args': 'program-args',
                    'program_arg': 'programArg',
                    'entry_class': 'entry-class',
                    'parallelism': 'parallelism',
                },
                'location_map': {
                    'jarid': 'path',
                    'program_args': 'query',
                    'program_arg': 'query',
                    'entry_class': 'query',
                    'parallelism': 'query',
                    'jar_plan_request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.jars_jarid_run_post_endpoint = _Endpoint(
            settings={
                'response_type': (JarRunResponseBody,),
                'auth': [],
                'endpoint_path': '/jars/{jarid}/run',
                'operation_id': 'jars_jarid_run_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'jarid',
                    'allow_non_restored_state',
                    'savepoint_path',
                    'program_args',
                    'program_arg',
                    'entry_class',
                    'parallelism',
                    'jar_run_request_body',
                ],
                'required': [
                    'jarid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jarid':
                        (str,),
                    'allow_non_restored_state':
                        (bool,),
                    'savepoint_path':
                        (str,),
                    'program_args':
                        (str,),
                    'program_arg':
                        (str,),
                    'entry_class':
                        (str,),
                    'parallelism':
                        (int,),
                    'jar_run_request_body':
                        (JarRunRequestBody,),
                },
                'attribute_map': {
                    'jarid': 'jarid',
                    'allow_non_restored_state': 'allowNonRestoredState',
                    'savepoint_path': 'savepointPath',
                    'program_args': 'program-args',
                    'program_arg': 'programArg',
                    'entry_class': 'entry-class',
                    'parallelism': 'parallelism',
                },
                'location_map': {
                    'jarid': 'path',
                    'allow_non_restored_state': 'query',
                    'savepoint_path': 'query',
                    'program_args': 'query',
                    'program_arg': 'query',
                    'entry_class': 'query',
                    'parallelism': 'query',
                    'jar_run_request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.jars_upload_post_endpoint = _Endpoint(
            settings={
                'response_type': (JarUploadResponseBody,),
                'auth': [],
                'endpoint_path': '/jars/upload',
                'operation_id': 'jars_upload_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                    'body',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-java-archive'
                ]
            },
            api_client=api_client
        )
        self.jobmanager_config_get_endpoint = _Endpoint(
            settings={
                'response_type': ([ClusterConfigurationInfoEntry],),
                'auth': [],
                'endpoint_path': '/jobmanager/config',
                'operation_id': 'jobmanager_config_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobmanager_logs_get_endpoint = _Endpoint(
            settings={
                'response_type': (LogListInfo,),
                'auth': [],
                'endpoint_path': '/jobmanager/logs',
                'operation_id': 'jobmanager_logs_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobmanager_metrics_get_endpoint = _Endpoint(
            settings={
                'response_type': (MetricCollectionResponseBody,),
                'auth': [],
                'endpoint_path': '/jobmanager/metrics',
                'operation_id': 'jobmanager_metrics_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'get',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get':
                        (str,),
                },
                'attribute_map': {
                    'get': 'get',
                },
                'location_map': {
                    'get': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobmanager_thread_dump_get_endpoint = _Endpoint(
            settings={
                'response_type': (ThreadDumpInfo,),
                'auth': [],
                'endpoint_path': '/jobmanager/thread-dump',
                'operation_id': 'jobmanager_thread_dump_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_get_endpoint = _Endpoint(
            settings={
                'response_type': (JobIdsWithStatusOverview,),
                'auth': [],
                'endpoint_path': '/jobs',
                'operation_id': 'jobs_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_accumulators_get_endpoint = _Endpoint(
            settings={
                'response_type': (JobAccumulatorsInfo,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/accumulators',
                'operation_id': 'jobs_jobid_accumulators_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'include_serialized_value',
                ],
                'required': [
                    'jobid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'include_serialized_value':
                        (bool,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'include_serialized_value': 'includeSerializedValue',
                },
                'location_map': {
                    'jobid': 'path',
                    'include_serialized_value': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_checkpoints_config_get_endpoint = _Endpoint(
            settings={
                'response_type': (CheckpointConfigInfo,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/checkpoints/config',
                'operation_id': 'jobs_jobid_checkpoints_config_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                ],
                'required': [
                    'jobid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                },
                'location_map': {
                    'jobid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_checkpoints_details_checkpointid_get_endpoint = _Endpoint(
            settings={
                'response_type': (CheckpointStatistics,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/checkpoints/details/{checkpointid}',
                'operation_id': 'jobs_jobid_checkpoints_details_checkpointid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'checkpointid',
                ],
                'required': [
                    'jobid',
                    'checkpointid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'checkpointid':
                        (int,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'checkpointid': 'checkpointid',
                },
                'location_map': {
                    'jobid': 'path',
                    'checkpointid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_checkpoints_details_checkpointid_subtasks_vertexid_get_endpoint = _Endpoint(
            settings={
                'response_type': (TaskCheckpointStatisticsWithSubtaskDetails,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/checkpoints/details/{checkpointid}/subtasks/{vertexid}',
                'operation_id': 'jobs_jobid_checkpoints_details_checkpointid_subtasks_vertexid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'checkpointid',
                    'vertexid',
                ],
                'required': [
                    'jobid',
                    'checkpointid',
                    'vertexid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'checkpointid':
                        (int,),
                    'vertexid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'checkpointid': 'checkpointid',
                    'vertexid': 'vertexid',
                },
                'location_map': {
                    'jobid': 'path',
                    'checkpointid': 'path',
                    'vertexid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_checkpoints_get_endpoint = _Endpoint(
            settings={
                'response_type': (CheckpointingStatistics,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/checkpoints',
                'operation_id': 'jobs_jobid_checkpoints_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                ],
                'required': [
                    'jobid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                },
                'location_map': {
                    'jobid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_config_get_endpoint = _Endpoint(
            settings={
                'response_type': (JobConfigInfo,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/config',
                'operation_id': 'jobs_jobid_config_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                ],
                'required': [
                    'jobid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                },
                'location_map': {
                    'jobid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_exceptions_get_endpoint = _Endpoint(
            settings={
                'response_type': (JobExceptionsInfoWithHistory,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/exceptions',
                'operation_id': 'jobs_jobid_exceptions_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'max_exceptions',
                ],
                'required': [
                    'jobid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'max_exceptions':
                        (int,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'max_exceptions': 'maxExceptions',
                },
                'location_map': {
                    'jobid': 'path',
                    'max_exceptions': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_execution_result_get_endpoint = _Endpoint(
            settings={
                'response_type': (JobExecutionResultResponseBody,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/execution-result',
                'operation_id': 'jobs_jobid_execution_result_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                ],
                'required': [
                    'jobid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                },
                'location_map': {
                    'jobid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_get_endpoint = _Endpoint(
            settings={
                'response_type': (JobDetailsInfo,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}',
                'operation_id': 'jobs_jobid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                ],
                'required': [
                    'jobid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                },
                'location_map': {
                    'jobid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_metrics_get_endpoint = _Endpoint(
            settings={
                'response_type': (MetricCollectionResponseBody,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/metrics',
                'operation_id': 'jobs_jobid_metrics_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'get',
                ],
                'required': [
                    'jobid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'get':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'get': 'get',
                },
                'location_map': {
                    'jobid': 'path',
                    'get': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_patch_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/jobs/{jobid}',
                'operation_id': 'jobs_jobid_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'mode',
                ],
                'required': [
                    'jobid',
                ],
                'nullable': [
                ],
                'enum': [
                    'mode',
                ],
                'validation': [
                    'jobid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('mode',): {

                        "CANCEL": "CANCEL",
                        "STOP": "STOP"
                    },
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'mode':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'mode': 'mode',
                },
                'location_map': {
                    'jobid': 'path',
                    'mode': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_plan_get_endpoint = _Endpoint(
            settings={
                'response_type': (JobPlanInfo,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/plan',
                'operation_id': 'jobs_jobid_plan_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                ],
                'required': [
                    'jobid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                },
                'location_map': {
                    'jobid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_rescaling_patch_endpoint = _Endpoint(
            settings={
                'response_type': (TriggerResponse,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/rescaling',
                'operation_id': 'jobs_jobid_rescaling_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'parallelism',
                ],
                'required': [
                    'jobid',
                    'parallelism',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'parallelism':
                        (int,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'parallelism': 'parallelism',
                },
                'location_map': {
                    'jobid': 'path',
                    'parallelism': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_rescaling_triggerid_get_endpoint = _Endpoint(
            settings={
                'response_type': (AsynchronousOperationResult,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/rescaling/{triggerid}',
                'operation_id': 'jobs_jobid_rescaling_triggerid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'triggerid',
                ],
                'required': [
                    'jobid',
                    'triggerid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'triggerid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('triggerid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'triggerid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'triggerid': 'triggerid',
                },
                'location_map': {
                    'jobid': 'path',
                    'triggerid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_savepoints_post_endpoint = _Endpoint(
            settings={
                'response_type': (TriggerResponse,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/savepoints',
                'operation_id': 'jobs_jobid_savepoints_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'savepoint_trigger_request_body',
                ],
                'required': [
                    'jobid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'savepoint_trigger_request_body':
                        (SavepointTriggerRequestBody,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                },
                'location_map': {
                    'jobid': 'path',
                    'savepoint_trigger_request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.jobs_jobid_savepoints_triggerid_get_endpoint = _Endpoint(
            settings={
                'response_type': (AsynchronousOperationResult,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/savepoints/{triggerid}',
                'operation_id': 'jobs_jobid_savepoints_triggerid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'triggerid',
                ],
                'required': [
                    'jobid',
                    'triggerid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'triggerid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('triggerid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'triggerid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'triggerid': 'triggerid',
                },
                'location_map': {
                    'jobid': 'path',
                    'triggerid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_stop_post_endpoint = _Endpoint(
            settings={
                'response_type': (TriggerResponse,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/stop',
                'operation_id': 'jobs_jobid_stop_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'stop_with_savepoint_request_body',
                ],
                'required': [
                    'jobid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'stop_with_savepoint_request_body':
                        (StopWithSavepointRequestBody,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                },
                'location_map': {
                    'jobid': 'path',
                    'stop_with_savepoint_request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.jobs_jobid_vertices_vertexid_accumulators_get_endpoint = _Endpoint(
            settings={
                'response_type': (JobVertexAccumulatorsInfo,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/vertices/{vertexid}/accumulators',
                'operation_id': 'jobs_jobid_vertices_vertexid_accumulators_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'vertexid',
                ],
                'required': [
                    'jobid',
                    'vertexid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'vertexid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'vertexid': 'vertexid',
                },
                'location_map': {
                    'jobid': 'path',
                    'vertexid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_vertices_vertexid_backpressure_get_endpoint = _Endpoint(
            settings={
                'response_type': (JobVertexBackPressureInfo,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/vertices/{vertexid}/backpressure',
                'operation_id': 'jobs_jobid_vertices_vertexid_backpressure_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'vertexid',
                ],
                'required': [
                    'jobid',
                    'vertexid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'vertexid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'vertexid': 'vertexid',
                },
                'location_map': {
                    'jobid': 'path',
                    'vertexid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_vertices_vertexid_flamegraph_get_endpoint = _Endpoint(
            settings={
                'response_type': (JobVertexFlameGraph,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/vertices/{vertexid}/flamegraph',
                'operation_id': 'jobs_jobid_vertices_vertexid_flamegraph_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'vertexid',
                    'type',
                ],
                'required': [
                    'jobid',
                    'vertexid',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('type',): {

                        "FULL": "FULL",
                        "ON_CPU": "ON_CPU",
                        "OFF_CPU": "OFF_CPU"
                    },
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'vertexid':
                        (str,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'vertexid': 'vertexid',
                    'type': 'type',
                },
                'location_map': {
                    'jobid': 'path',
                    'vertexid': 'path',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_vertices_vertexid_get_endpoint = _Endpoint(
            settings={
                'response_type': (JobVertexDetailsInfo,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/vertices/{vertexid}',
                'operation_id': 'jobs_jobid_vertices_vertexid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'vertexid',
                ],
                'required': [
                    'jobid',
                    'vertexid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'vertexid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'vertexid': 'vertexid',
                },
                'location_map': {
                    'jobid': 'path',
                    'vertexid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_vertices_vertexid_metrics_get_endpoint = _Endpoint(
            settings={
                'response_type': (MetricCollectionResponseBody,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/vertices/{vertexid}/metrics',
                'operation_id': 'jobs_jobid_vertices_vertexid_metrics_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'vertexid',
                    'get',
                ],
                'required': [
                    'jobid',
                    'vertexid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'vertexid':
                        (str,),
                    'get':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'vertexid': 'vertexid',
                    'get': 'get',
                },
                'location_map': {
                    'jobid': 'path',
                    'vertexid': 'path',
                    'get': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_vertices_vertexid_subtasks_accumulators_get_endpoint = _Endpoint(
            settings={
                'response_type': (SubtasksAllAccumulatorsInfo,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/vertices/{vertexid}/subtasks/accumulators',
                'operation_id': 'jobs_jobid_vertices_vertexid_subtasks_accumulators_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'vertexid',
                ],
                'required': [
                    'jobid',
                    'vertexid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'vertexid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'vertexid': 'vertexid',
                },
                'location_map': {
                    'jobid': 'path',
                    'vertexid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_vertices_vertexid_subtasks_metrics_get_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/vertices/{vertexid}/subtasks/metrics',
                'operation_id': 'jobs_jobid_vertices_vertexid_subtasks_metrics_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'vertexid',
                    'get',
                    'agg',
                    'subtasks',
                ],
                'required': [
                    'jobid',
                    'vertexid',
                ],
                'nullable': [
                ],
                'enum': [
                    'agg',
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('agg',): {

                        "MIN": "MIN",
                        "MAX": "MAX",
                        "SUM": "SUM",
                        "AVG": "AVG"
                    },
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'vertexid':
                        (str,),
                    'get':
                        (str,),
                    'agg':
                        (str,),
                    'subtasks':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'vertexid': 'vertexid',
                    'get': 'get',
                    'agg': 'agg',
                    'subtasks': 'subtasks',
                },
                'location_map': {
                    'jobid': 'path',
                    'vertexid': 'path',
                    'get': 'query',
                    'agg': 'query',
                    'subtasks': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_vertices_vertexid_subtasks_subtaskindex_attempts_attempt_accumulators_get_endpoint = _Endpoint(
            settings={
                'response_type': (SubtaskExecutionAttemptAccumulatorsInfo,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/vertices/{vertexid}/subtasks/{subtaskindex}/attempts/{attempt}/accumulators',
                'operation_id': 'jobs_jobid_vertices_vertexid_subtasks_subtaskindex_attempts_attempt_accumulators_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'vertexid',
                    'subtaskindex',
                    'attempt',
                ],
                'required': [
                    'jobid',
                    'vertexid',
                    'subtaskindex',
                    'attempt',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'vertexid':
                        (str,),
                    'subtaskindex':
                        (int,),
                    'attempt':
                        (int,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'vertexid': 'vertexid',
                    'subtaskindex': 'subtaskindex',
                    'attempt': 'attempt',
                },
                'location_map': {
                    'jobid': 'path',
                    'vertexid': 'path',
                    'subtaskindex': 'path',
                    'attempt': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_vertices_vertexid_subtasks_subtaskindex_attempts_attempt_get_endpoint = _Endpoint(
            settings={
                'response_type': (SubtaskExecutionAttemptDetailsInfo,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/vertices/{vertexid}/subtasks/{subtaskindex}/attempts/{attempt}',
                'operation_id': 'jobs_jobid_vertices_vertexid_subtasks_subtaskindex_attempts_attempt_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'vertexid',
                    'subtaskindex',
                    'attempt',
                ],
                'required': [
                    'jobid',
                    'vertexid',
                    'subtaskindex',
                    'attempt',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'vertexid':
                        (str,),
                    'subtaskindex':
                        (int,),
                    'attempt':
                        (int,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'vertexid': 'vertexid',
                    'subtaskindex': 'subtaskindex',
                    'attempt': 'attempt',
                },
                'location_map': {
                    'jobid': 'path',
                    'vertexid': 'path',
                    'subtaskindex': 'path',
                    'attempt': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_vertices_vertexid_subtasks_subtaskindex_get_endpoint = _Endpoint(
            settings={
                'response_type': (SubtaskExecutionAttemptDetailsInfo,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/vertices/{vertexid}/subtasks/{subtaskindex}',
                'operation_id': 'jobs_jobid_vertices_vertexid_subtasks_subtaskindex_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'vertexid',
                    'subtaskindex',
                ],
                'required': [
                    'jobid',
                    'vertexid',
                    'subtaskindex',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'vertexid':
                        (str,),
                    'subtaskindex':
                        (int,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'vertexid': 'vertexid',
                    'subtaskindex': 'subtaskindex',
                },
                'location_map': {
                    'jobid': 'path',
                    'vertexid': 'path',
                    'subtaskindex': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_vertices_vertexid_subtasks_subtaskindex_metrics_get_endpoint = _Endpoint(
            settings={
                'response_type': (MetricCollectionResponseBody,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/vertices/{vertexid}/subtasks/{subtaskindex}/metrics',
                'operation_id': 'jobs_jobid_vertices_vertexid_subtasks_subtaskindex_metrics_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'vertexid',
                    'subtaskindex',
                    'get',
                ],
                'required': [
                    'jobid',
                    'vertexid',
                    'subtaskindex',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'vertexid':
                        (str,),
                    'subtaskindex':
                        (int,),
                    'get':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'vertexid': 'vertexid',
                    'subtaskindex': 'subtaskindex',
                    'get': 'get',
                },
                'location_map': {
                    'jobid': 'path',
                    'vertexid': 'path',
                    'subtaskindex': 'path',
                    'get': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_vertices_vertexid_subtasktimes_get_endpoint = _Endpoint(
            settings={
                'response_type': (SubtasksTimesInfo,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/vertices/{vertexid}/subtasktimes',
                'operation_id': 'jobs_jobid_vertices_vertexid_subtasktimes_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'vertexid',
                ],
                'required': [
                    'jobid',
                    'vertexid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'vertexid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'vertexid': 'vertexid',
                },
                'location_map': {
                    'jobid': 'path',
                    'vertexid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_vertices_vertexid_taskmanagers_get_endpoint = _Endpoint(
            settings={
                'response_type': (JobVertexTaskManagersInfo,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/vertices/{vertexid}/taskmanagers',
                'operation_id': 'jobs_jobid_vertices_vertexid_taskmanagers_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'vertexid',
                ],
                'required': [
                    'jobid',
                    'vertexid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'vertexid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'vertexid': 'vertexid',
                },
                'location_map': {
                    'jobid': 'path',
                    'vertexid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_jobid_vertices_vertexid_watermarks_get_endpoint = _Endpoint(
            settings={
                'response_type': (MetricCollectionResponseBody,),
                'auth': [],
                'endpoint_path': '/jobs/{jobid}/vertices/{vertexid}/watermarks',
                'operation_id': 'jobs_jobid_vertices_vertexid_watermarks_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jobid',
                    'vertexid',
                ],
                'required': [
                    'jobid',
                    'vertexid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'jobid',
                    'vertexid',
                ]
            },
            root_map={
                'validations': {
                    ('jobid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                    ('vertexid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jobid':
                        (str,),
                    'vertexid':
                        (str,),
                },
                'attribute_map': {
                    'jobid': 'jobid',
                    'vertexid': 'vertexid',
                },
                'location_map': {
                    'jobid': 'path',
                    'vertexid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_metrics_get_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/jobs/metrics',
                'operation_id': 'jobs_metrics_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'get',
                    'agg',
                    'jobs',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'agg',
                ],
                'validation': [
                    'jobs',
                ]
            },
            root_map={
                'validations': {
                    ('jobs',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('agg',): {

                        "MIN": "MIN",
                        "MAX": "MAX",
                        "SUM": "SUM",
                        "AVG": "AVG"
                    },
                },
                'openapi_types': {
                    'get':
                        (str,),
                    'agg':
                        (str,),
                    'jobs':
                        (str,),
                },
                'attribute_map': {
                    'get': 'get',
                    'agg': 'agg',
                    'jobs': 'jobs',
                },
                'location_map': {
                    'get': 'query',
                    'agg': 'query',
                    'jobs': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_overview_get_endpoint = _Endpoint(
            settings={
                'response_type': (MultipleJobsDetails,),
                'auth': [],
                'endpoint_path': '/jobs/overview',
                'operation_id': 'jobs_overview_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.jobs_post_endpoint = _Endpoint(
            settings={
                'response_type': (JobSubmitResponseBody,),
                'auth': [],
                'endpoint_path': '/jobs',
                'operation_id': 'jobs_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'request',
                    'filename',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request':
                        (JobSubmitRequestBody,),
                    'filename':
                        ([file_type],),
                },
                'attribute_map': {
                    'request': 'request',
                    'filename': 'filename',
                },
                'location_map': {
                    'request': 'form',
                    'filename': 'form',
                },
                'collection_format_map': {
                    'filename': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.overview_get_endpoint = _Endpoint(
            settings={
                'response_type': (ClusterOverviewWithVersion,),
                'auth': [],
                'endpoint_path': '/overview',
                'operation_id': 'overview_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.savepoint_disposal_post_endpoint = _Endpoint(
            settings={
                'response_type': (TriggerResponse,),
                'auth': [],
                'endpoint_path': '/savepoint-disposal',
                'operation_id': 'savepoint_disposal_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'savepoint_disposal_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'savepoint_disposal_request':
                        (SavepointDisposalRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'savepoint_disposal_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.savepoint_disposal_triggerid_get_endpoint = _Endpoint(
            settings={
                'response_type': (AsynchronousOperationResult,),
                'auth': [],
                'endpoint_path': '/savepoint-disposal/{triggerid}',
                'operation_id': 'savepoint_disposal_triggerid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'triggerid',
                ],
                'required': [
                    'triggerid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'triggerid',
                ]
            },
            root_map={
                'validations': {
                    ('triggerid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'triggerid':
                        (str,),
                },
                'attribute_map': {
                    'triggerid': 'triggerid',
                },
                'location_map': {
                    'triggerid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.taskmanagers_get_endpoint = _Endpoint(
            settings={
                'response_type': (TaskManagersInfo,),
                'auth': [],
                'endpoint_path': '/taskmanagers',
                'operation_id': 'taskmanagers_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.taskmanagers_metrics_get_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/taskmanagers/metrics',
                'operation_id': 'taskmanagers_metrics_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'get',
                    'agg',
                    'taskmanagers',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'agg',
                ],
                'validation': [
                    'taskmanagers',
                ]
            },
            root_map={
                'validations': {
                    ('taskmanagers',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('agg',): {

                        "MIN": "MIN",
                        "MAX": "MAX",
                        "SUM": "SUM",
                        "AVG": "AVG"
                    },
                },
                'openapi_types': {
                    'get':
                        (str,),
                    'agg':
                        (str,),
                    'taskmanagers':
                        (str,),
                },
                'attribute_map': {
                    'get': 'get',
                    'agg': 'agg',
                    'taskmanagers': 'taskmanagers',
                },
                'location_map': {
                    'get': 'query',
                    'agg': 'query',
                    'taskmanagers': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.taskmanagers_taskmanagerid_get_endpoint = _Endpoint(
            settings={
                'response_type': (TaskManagerDetailsInfo,),
                'auth': [],
                'endpoint_path': '/taskmanagers/{taskmanagerid}',
                'operation_id': 'taskmanagers_taskmanagerid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'taskmanagerid',
                ],
                'required': [
                    'taskmanagerid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'taskmanagerid',
                ]
            },
            root_map={
                'validations': {
                    ('taskmanagerid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'taskmanagerid':
                        (str,),
                },
                'attribute_map': {
                    'taskmanagerid': 'taskmanagerid',
                },
                'location_map': {
                    'taskmanagerid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.taskmanagers_taskmanagerid_logs_get_endpoint = _Endpoint(
            settings={
                'response_type': (LogListInfo,),
                'auth': [],
                'endpoint_path': '/taskmanagers/{taskmanagerid}/logs',
                'operation_id': 'taskmanagers_taskmanagerid_logs_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'taskmanagerid',
                ],
                'required': [
                    'taskmanagerid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'taskmanagerid',
                ]
            },
            root_map={
                'validations': {
                    ('taskmanagerid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'taskmanagerid':
                        (str,),
                },
                'attribute_map': {
                    'taskmanagerid': 'taskmanagerid',
                },
                'location_map': {
                    'taskmanagerid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.taskmanagers_taskmanagerid_metrics_get_endpoint = _Endpoint(
            settings={
                'response_type': (MetricCollectionResponseBody,),
                'auth': [],
                'endpoint_path': '/taskmanagers/{taskmanagerid}/metrics',
                'operation_id': 'taskmanagers_taskmanagerid_metrics_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'taskmanagerid',
                    'get',
                ],
                'required': [
                    'taskmanagerid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'taskmanagerid',
                ]
            },
            root_map={
                'validations': {
                    ('taskmanagerid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'taskmanagerid':
                        (str,),
                    'get':
                        (str,),
                },
                'attribute_map': {
                    'taskmanagerid': 'taskmanagerid',
                    'get': 'get',
                },
                'location_map': {
                    'taskmanagerid': 'path',
                    'get': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.taskmanagers_taskmanagerid_thread_dump_get_endpoint = _Endpoint(
            settings={
                'response_type': (ThreadDumpInfo,),
                'auth': [],
                'endpoint_path': '/taskmanagers/{taskmanagerid}/thread-dump',
                'operation_id': 'taskmanagers_taskmanagerid_thread_dump_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'taskmanagerid',
                ],
                'required': [
                    'taskmanagerid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'taskmanagerid',
                ]
            },
            root_map={
                'validations': {
                    ('taskmanagerid',): {

                        'regex': {
                            'pattern': r'^[0-9a-f]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'taskmanagerid':
                        (str,),
                },
                'attribute_map': {
                    'taskmanagerid': 'taskmanagerid',
                },
                'location_map': {
                    'taskmanagerid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def cluster_delete(
        self,
        **kwargs
    ):
        """cluster_delete  # noqa: E501

        Shuts down the cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cluster_delete(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.cluster_delete_endpoint.call_with_http_info(**kwargs)

    def config_get(
        self,
        **kwargs
    ):
        """config_get  # noqa: E501

        Returns the configuration of the WebUI.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.config_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DashboardConfiguration
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.config_get_endpoint.call_with_http_info(**kwargs)

    def datasets_datasetid_delete(
        self,
        datasetid,
        **kwargs
    ):
        """datasets_datasetid_delete  # noqa: E501

        Triggers the deletion of a cluster data set. This async operation would return a 'triggerid' for further query identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.datasets_datasetid_delete(datasetid, async_req=True)
        >>> result = thread.get()

        Args:
            datasetid (str): 32-character hexadecimal string value that identifies a cluster data set.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TriggerResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['datasetid'] = \
            datasetid
        return self.datasets_datasetid_delete_endpoint.call_with_http_info(**kwargs)

    def datasets_delete_triggerid_get(
        self,
        triggerid,
        **kwargs
    ):
        """datasets_delete_triggerid_get  # noqa: E501

        Returns the status for the delete operation of a cluster data set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.datasets_delete_triggerid_get(triggerid, async_req=True)
        >>> result = thread.get()

        Args:
            triggerid (str): 32-character hexadecimal string that identifies an asynchronous operation trigger ID. The ID was returned then the operation was triggered.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AsynchronousOperationResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['triggerid'] = \
            triggerid
        return self.datasets_delete_triggerid_get_endpoint.call_with_http_info(**kwargs)

    def datasets_get(
        self,
        **kwargs
    ):
        """datasets_get  # noqa: E501

        Returns all cluster data sets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.datasets_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClusterDataSetListResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.datasets_get_endpoint.call_with_http_info(**kwargs)

    def jars_get(
        self,
        **kwargs
    ):
        """jars_get  # noqa: E501

        Returns a list of all jars previously uploaded via '/jars/upload'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jars_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JarListInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.jars_get_endpoint.call_with_http_info(**kwargs)

    def jars_jarid_delete(
        self,
        jarid,
        **kwargs
    ):
        """jars_jarid_delete  # noqa: E501

        Deletes a jar previously uploaded via '/jars/upload'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jars_jarid_delete(jarid, async_req=True)
        >>> result = thread.get()

        Args:
            jarid (str): String value that identifies a jar. When uploading the jar a path is returned, where the filename is the ID. This value is equivalent to the `id` field in the list of uploaded jars (/jars).

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jarid'] = \
            jarid
        return self.jars_jarid_delete_endpoint.call_with_http_info(**kwargs)

    def jars_jarid_plan_get(
        self,
        jarid,
        **kwargs
    ):
        """jars_jarid_plan_get  # noqa: E501

        Returns the dataflow plan of a job contained in a jar previously uploaded via '/jars/upload'. Program arguments can be passed both via the JSON request (recommended) or query parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jars_jarid_plan_get(jarid, async_req=True)
        >>> result = thread.get()

        Args:
            jarid (str): String value that identifies a jar. When uploading the jar a path is returned, where the filename is the ID. This value is equivalent to the `id` field in the list of uploaded jars (/jars).

        Keyword Args:
            program_args (str): Deprecated, please use 'programArg' instead. String value that specifies the arguments for the program or plan. [optional]
            program_arg (str): Comma-separated list of program arguments.. [optional]
            entry_class (str): String value that specifies the fully qualified name of the entry point class. Overrides the class defined in the jar file manifest.. [optional]
            parallelism (int): Positive integer value that specifies the desired parallelism for the job.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobPlanInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jarid'] = \
            jarid
        return self.jars_jarid_plan_get_endpoint.call_with_http_info(**kwargs)

    def jars_jarid_plan_post(
        self,
        jarid,
        **kwargs
    ):
        """jars_jarid_plan_post  # noqa: E501

        Returns the dataflow plan of a job contained in a jar previously uploaded via '/jars/upload'. Program arguments can be passed both via the JSON request (recommended) or query parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jars_jarid_plan_post(jarid, async_req=True)
        >>> result = thread.get()

        Args:
            jarid (str): String value that identifies a jar. When uploading the jar a path is returned, where the filename is the ID. This value is equivalent to the `id` field in the list of uploaded jars (/jars).

        Keyword Args:
            program_args (str): Deprecated, please use 'programArg' instead. String value that specifies the arguments for the program or plan. [optional]
            program_arg (str): Comma-separated list of program arguments.. [optional]
            entry_class (str): String value that specifies the fully qualified name of the entry point class. Overrides the class defined in the jar file manifest.. [optional]
            parallelism (int): Positive integer value that specifies the desired parallelism for the job.. [optional]
            jar_plan_request_body (JarPlanRequestBody): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobPlanInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jarid'] = \
            jarid
        return self.jars_jarid_plan_post_endpoint.call_with_http_info(**kwargs)

    def jars_jarid_run_post(
        self,
        jarid,
        **kwargs
    ):
        """jars_jarid_run_post  # noqa: E501

        Submits a job by running a jar previously uploaded via '/jars/upload'. Program arguments can be passed both via the JSON request (recommended) or query parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jars_jarid_run_post(jarid, async_req=True)
        >>> result = thread.get()

        Args:
            jarid (str): String value that identifies a jar. When uploading the jar a path is returned, where the filename is the ID. This value is equivalent to the `id` field in the list of uploaded jars (/jars).

        Keyword Args:
            allow_non_restored_state (bool): Boolean value that specifies whether the job submission should be rejected if the savepoint contains state that cannot be mapped back to the job.. [optional]
            savepoint_path (str): String value that specifies the path of the savepoint to restore the job from.. [optional]
            program_args (str): Deprecated, please use 'programArg' instead. String value that specifies the arguments for the program or plan. [optional]
            program_arg (str): Comma-separated list of program arguments.. [optional]
            entry_class (str): String value that specifies the fully qualified name of the entry point class. Overrides the class defined in the jar file manifest.. [optional]
            parallelism (int): Positive integer value that specifies the desired parallelism for the job.. [optional]
            jar_run_request_body (JarRunRequestBody): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JarRunResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jarid'] = \
            jarid
        return self.jars_jarid_run_post_endpoint.call_with_http_info(**kwargs)

    def jars_upload_post(
        self,
        body,
        **kwargs
    ):
        """jars_upload_post  # noqa: E501

        Uploads a jar to the cluster. The jar must be sent as multi-part data. Make sure that the \"Content-Type\" header is set to \"application/x-java-archive\", as some http libraries do not add the header by default. Using 'curl' you can upload a jar via 'curl -X POST -H \"Expect:\" -F \"jarfile=@path/to/flink-job.jar\" http://hostname:port/jars/upload'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jars_upload_post(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JarUploadResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.jars_upload_post_endpoint.call_with_http_info(**kwargs)

    def jobmanager_config_get(
        self,
        **kwargs
    ):
        """jobmanager_config_get  # noqa: E501

        Returns the cluster configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobmanager_config_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [ClusterConfigurationInfoEntry]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.jobmanager_config_get_endpoint.call_with_http_info(**kwargs)

    def jobmanager_logs_get(
        self,
        **kwargs
    ):
        """jobmanager_logs_get  # noqa: E501

        Returns the list of log files on the JobManager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobmanager_logs_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LogListInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.jobmanager_logs_get_endpoint.call_with_http_info(**kwargs)

    def jobmanager_metrics_get(
        self,
        **kwargs
    ):
        """jobmanager_metrics_get  # noqa: E501

        Provides access to job manager metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobmanager_metrics_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            get (str): Comma-separated list of string values to select specific metrics.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MetricCollectionResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.jobmanager_metrics_get_endpoint.call_with_http_info(**kwargs)

    def jobmanager_thread_dump_get(
        self,
        **kwargs
    ):
        """jobmanager_thread_dump_get  # noqa: E501

        Returns the thread dump of the JobManager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobmanager_thread_dump_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ThreadDumpInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.jobmanager_thread_dump_get_endpoint.call_with_http_info(**kwargs)

    def jobs_get(
        self,
        **kwargs
    ):
        """jobs_get  # noqa: E501

        Returns an overview over all jobs and their current state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobIdsWithStatusOverview
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.jobs_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_accumulators_get(
        self,
        jobid,
        **kwargs
    ):
        """jobs_jobid_accumulators_get  # noqa: E501

        Returns the accumulators for all tasks of a job, aggregated across the respective subtasks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_accumulators_get(jobid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.

        Keyword Args:
            include_serialized_value (bool): Boolean value that specifies whether serialized user task accumulators should be included in the response.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobAccumulatorsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        return self.jobs_jobid_accumulators_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_checkpoints_config_get(
        self,
        jobid,
        **kwargs
    ):
        """jobs_jobid_checkpoints_config_get  # noqa: E501

        Returns the checkpointing configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_checkpoints_config_get(jobid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CheckpointConfigInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        return self.jobs_jobid_checkpoints_config_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_checkpoints_details_checkpointid_get(
        self,
        jobid,
        checkpointid,
        **kwargs
    ):
        """jobs_jobid_checkpoints_details_checkpointid_get  # noqa: E501

        Returns details for a checkpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_checkpoints_details_checkpointid_get(jobid, checkpointid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            checkpointid (int): Long value that identifies a checkpoint.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CheckpointStatistics
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['checkpointid'] = \
            checkpointid
        return self.jobs_jobid_checkpoints_details_checkpointid_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_checkpoints_details_checkpointid_subtasks_vertexid_get(
        self,
        jobid,
        checkpointid,
        vertexid,
        **kwargs
    ):
        """jobs_jobid_checkpoints_details_checkpointid_subtasks_vertexid_get  # noqa: E501

        Returns checkpoint statistics for a task and its subtasks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_checkpoints_details_checkpointid_subtasks_vertexid_get(jobid, checkpointid, vertexid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            checkpointid (int): Long value that identifies a checkpoint.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskCheckpointStatisticsWithSubtaskDetails
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['checkpointid'] = \
            checkpointid
        kwargs['vertexid'] = \
            vertexid
        return self.jobs_jobid_checkpoints_details_checkpointid_subtasks_vertexid_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_checkpoints_get(
        self,
        jobid,
        **kwargs
    ):
        """jobs_jobid_checkpoints_get  # noqa: E501

        Returns checkpointing statistics for a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_checkpoints_get(jobid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CheckpointingStatistics
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        return self.jobs_jobid_checkpoints_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_config_get(
        self,
        jobid,
        **kwargs
    ):
        """jobs_jobid_config_get  # noqa: E501

        Returns the configuration of a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_config_get(jobid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobConfigInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        return self.jobs_jobid_config_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_exceptions_get(
        self,
        jobid,
        **kwargs
    ):
        """jobs_jobid_exceptions_get  # noqa: E501

        Returns the most recent exceptions that have been handled by Flink for this job. The 'exceptionHistory.truncated' flag defines whether exceptions were filtered out through the GET parameter. The backend collects only a specific amount of most recent exceptions per job. This can be configured through web.exception-history-size in the Flink configuration. The following first-level members are deprecated: 'root-exception', 'timestamp', 'all-exceptions', and 'truncated'. Use the data provided through 'exceptionHistory', instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_exceptions_get(jobid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.

        Keyword Args:
            max_exceptions (int): Comma-separated list of integer values that specifies the upper limit of exceptions to return.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobExceptionsInfoWithHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        return self.jobs_jobid_exceptions_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_execution_result_get(
        self,
        jobid,
        **kwargs
    ):
        """jobs_jobid_execution_result_get  # noqa: E501

        Returns the result of a job execution. Gives access to the execution time of the job and to all accumulators created by this job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_execution_result_get(jobid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobExecutionResultResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        return self.jobs_jobid_execution_result_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_get(
        self,
        jobid,
        **kwargs
    ):
        """jobs_jobid_get  # noqa: E501

        Returns details of a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_get(jobid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobDetailsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        return self.jobs_jobid_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_metrics_get(
        self,
        jobid,
        **kwargs
    ):
        """jobs_jobid_metrics_get  # noqa: E501

        Provides access to job metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_metrics_get(jobid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.

        Keyword Args:
            get (str): Comma-separated list of string values to select specific metrics.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MetricCollectionResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        return self.jobs_jobid_metrics_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_patch(
        self,
        jobid,
        **kwargs
    ):
        """jobs_jobid_patch  # noqa: E501

        Terminates a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_patch(jobid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.

        Keyword Args:
            mode (str): String value that specifies the termination mode. The only supported value is: \"cancel\".. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        return self.jobs_jobid_patch_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_plan_get(
        self,
        jobid,
        **kwargs
    ):
        """jobs_jobid_plan_get  # noqa: E501

        Returns the dataflow plan of a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_plan_get(jobid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobPlanInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        return self.jobs_jobid_plan_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_rescaling_patch(
        self,
        jobid,
        parallelism,
        **kwargs
    ):
        """jobs_jobid_rescaling_patch  # noqa: E501

        Triggers the rescaling of a job. This async operation would return a 'triggerid' for further query identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_rescaling_patch(jobid, parallelism, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            parallelism (int): Positive integer value that specifies the desired parallelism.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TriggerResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['parallelism'] = \
            parallelism
        return self.jobs_jobid_rescaling_patch_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_rescaling_triggerid_get(
        self,
        jobid,
        triggerid,
        **kwargs
    ):
        """jobs_jobid_rescaling_triggerid_get  # noqa: E501

        Returns the status of a rescaling operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_rescaling_triggerid_get(jobid, triggerid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            triggerid (str): 32-character hexadecimal string that identifies an asynchronous operation trigger ID. The ID was returned then the operation was triggered.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AsynchronousOperationResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['triggerid'] = \
            triggerid
        return self.jobs_jobid_rescaling_triggerid_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_savepoints_post(
        self,
        jobid,
        **kwargs
    ):
        """jobs_jobid_savepoints_post  # noqa: E501

        Triggers a savepoint, and optionally cancels the job afterwards. This async operation would return a 'triggerid' for further query identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_savepoints_post(jobid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.

        Keyword Args:
            savepoint_trigger_request_body (SavepointTriggerRequestBody): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TriggerResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        return self.jobs_jobid_savepoints_post_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_savepoints_triggerid_get(
        self,
        jobid,
        triggerid,
        **kwargs
    ):
        """jobs_jobid_savepoints_triggerid_get  # noqa: E501

        Returns the status of a savepoint operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_savepoints_triggerid_get(jobid, triggerid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            triggerid (str): 32-character hexadecimal string that identifies an asynchronous operation trigger ID. The ID was returned then the operation was triggered.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AsynchronousOperationResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['triggerid'] = \
            triggerid
        return self.jobs_jobid_savepoints_triggerid_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_stop_post(
        self,
        jobid,
        **kwargs
    ):
        """jobs_jobid_stop_post  # noqa: E501

        Stops a job with a savepoint. Optionally, it can also emit a MAX_WATERMARK before taking the savepoint to flush out any state waiting for timers to fire. This async operation would return a 'triggerid' for further query identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_stop_post(jobid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.

        Keyword Args:
            stop_with_savepoint_request_body (StopWithSavepointRequestBody): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TriggerResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        return self.jobs_jobid_stop_post_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_vertices_vertexid_accumulators_get(
        self,
        jobid,
        vertexid,
        **kwargs
    ):
        """jobs_jobid_vertices_vertexid_accumulators_get  # noqa: E501

        Returns user-defined accumulators of a task, aggregated across all subtasks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_vertices_vertexid_accumulators_get(jobid, vertexid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobVertexAccumulatorsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['vertexid'] = \
            vertexid
        return self.jobs_jobid_vertices_vertexid_accumulators_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_vertices_vertexid_backpressure_get(
        self,
        jobid,
        vertexid,
        **kwargs
    ):
        """jobs_jobid_vertices_vertexid_backpressure_get  # noqa: E501

        Returns back-pressure information for a job, and may initiate back-pressure sampling if necessary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_vertices_vertexid_backpressure_get(jobid, vertexid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobVertexBackPressureInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['vertexid'] = \
            vertexid
        return self.jobs_jobid_vertices_vertexid_backpressure_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_vertices_vertexid_flamegraph_get(
        self,
        jobid,
        vertexid,
        **kwargs
    ):
        """jobs_jobid_vertices_vertexid_flamegraph_get  # noqa: E501

        Returns flame graph information for a vertex, and may initiate flame graph sampling if necessary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_vertices_vertexid_flamegraph_get(jobid, vertexid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.

        Keyword Args:
            type (str): String value that specifies the Flame Graph type. Supported options are: \"[FULL, ON_CPU, OFF_CPU]\".. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobVertexFlameGraph
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['vertexid'] = \
            vertexid
        return self.jobs_jobid_vertices_vertexid_flamegraph_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_vertices_vertexid_get(
        self,
        jobid,
        vertexid,
        **kwargs
    ):
        """jobs_jobid_vertices_vertexid_get  # noqa: E501

        Returns details for a task, with a summary for each of its subtasks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_vertices_vertexid_get(jobid, vertexid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobVertexDetailsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['vertexid'] = \
            vertexid
        return self.jobs_jobid_vertices_vertexid_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_vertices_vertexid_metrics_get(
        self,
        jobid,
        vertexid,
        **kwargs
    ):
        """jobs_jobid_vertices_vertexid_metrics_get  # noqa: E501

        Provides access to task metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_vertices_vertexid_metrics_get(jobid, vertexid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.

        Keyword Args:
            get (str): Comma-separated list of string values to select specific metrics.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MetricCollectionResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['vertexid'] = \
            vertexid
        return self.jobs_jobid_vertices_vertexid_metrics_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_vertices_vertexid_subtasks_accumulators_get(
        self,
        jobid,
        vertexid,
        **kwargs
    ):
        """jobs_jobid_vertices_vertexid_subtasks_accumulators_get  # noqa: E501

        Returns all user-defined accumulators for all subtasks of a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_vertices_vertexid_subtasks_accumulators_get(jobid, vertexid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SubtasksAllAccumulatorsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['vertexid'] = \
            vertexid
        return self.jobs_jobid_vertices_vertexid_subtasks_accumulators_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_vertices_vertexid_subtasks_metrics_get(
        self,
        jobid,
        vertexid,
        **kwargs
    ):
        """jobs_jobid_vertices_vertexid_subtasks_metrics_get  # noqa: E501

        Provides access to aggregated subtask metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_vertices_vertexid_subtasks_metrics_get(jobid, vertexid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.

        Keyword Args:
            get (str): Comma-separated list of string values to select specific metrics.. [optional]
            agg (str): Comma-separated list of aggregation modes which should be calculated. Available aggregations are: \"min, max, sum, avg\".. [optional]
            subtasks (str): Comma-separated list of integer ranges (e.g. \"1,3,5-9\") to select specific subtasks.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['vertexid'] = \
            vertexid
        return self.jobs_jobid_vertices_vertexid_subtasks_metrics_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_vertices_vertexid_subtasks_subtaskindex_attempts_attempt_accumulators_get(
        self,
        jobid,
        vertexid,
        subtaskindex,
        attempt,
        **kwargs
    ):
        """jobs_jobid_vertices_vertexid_subtasks_subtaskindex_attempts_attempt_accumulators_get  # noqa: E501

        Returns the accumulators of an execution attempt of a subtask. Multiple execution attempts happen in case of failure/recovery.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_vertices_vertexid_subtasks_subtaskindex_attempts_attempt_accumulators_get(jobid, vertexid, subtaskindex, attempt, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.
            subtaskindex (int): Positive integer value that identifies a subtask.
            attempt (int): Positive integer value that identifies an execution attempt.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SubtaskExecutionAttemptAccumulatorsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['vertexid'] = \
            vertexid
        kwargs['subtaskindex'] = \
            subtaskindex
        kwargs['attempt'] = \
            attempt
        return self.jobs_jobid_vertices_vertexid_subtasks_subtaskindex_attempts_attempt_accumulators_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_vertices_vertexid_subtasks_subtaskindex_attempts_attempt_get(
        self,
        jobid,
        vertexid,
        subtaskindex,
        attempt,
        **kwargs
    ):
        """jobs_jobid_vertices_vertexid_subtasks_subtaskindex_attempts_attempt_get  # noqa: E501

        Returns details of an execution attempt of a subtask. Multiple execution attempts happen in case of failure/recovery.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_vertices_vertexid_subtasks_subtaskindex_attempts_attempt_get(jobid, vertexid, subtaskindex, attempt, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.
            subtaskindex (int): Positive integer value that identifies a subtask.
            attempt (int): Positive integer value that identifies an execution attempt.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SubtaskExecutionAttemptDetailsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['vertexid'] = \
            vertexid
        kwargs['subtaskindex'] = \
            subtaskindex
        kwargs['attempt'] = \
            attempt
        return self.jobs_jobid_vertices_vertexid_subtasks_subtaskindex_attempts_attempt_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_vertices_vertexid_subtasks_subtaskindex_get(
        self,
        jobid,
        vertexid,
        subtaskindex,
        **kwargs
    ):
        """jobs_jobid_vertices_vertexid_subtasks_subtaskindex_get  # noqa: E501

        Returns details of the current or latest execution attempt of a subtask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_vertices_vertexid_subtasks_subtaskindex_get(jobid, vertexid, subtaskindex, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.
            subtaskindex (int): Positive integer value that identifies a subtask.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SubtaskExecutionAttemptDetailsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['vertexid'] = \
            vertexid
        kwargs['subtaskindex'] = \
            subtaskindex
        return self.jobs_jobid_vertices_vertexid_subtasks_subtaskindex_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_vertices_vertexid_subtasks_subtaskindex_metrics_get(
        self,
        jobid,
        vertexid,
        subtaskindex,
        **kwargs
    ):
        """jobs_jobid_vertices_vertexid_subtasks_subtaskindex_metrics_get  # noqa: E501

        Provides access to subtask metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_vertices_vertexid_subtasks_subtaskindex_metrics_get(jobid, vertexid, subtaskindex, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.
            subtaskindex (int): Positive integer value that identifies a subtask.

        Keyword Args:
            get (str): Comma-separated list of string values to select specific metrics.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MetricCollectionResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['vertexid'] = \
            vertexid
        kwargs['subtaskindex'] = \
            subtaskindex
        return self.jobs_jobid_vertices_vertexid_subtasks_subtaskindex_metrics_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_vertices_vertexid_subtasktimes_get(
        self,
        jobid,
        vertexid,
        **kwargs
    ):
        """jobs_jobid_vertices_vertexid_subtasktimes_get  # noqa: E501

        Returns time-related information for all subtasks of a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_vertices_vertexid_subtasktimes_get(jobid, vertexid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SubtasksTimesInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['vertexid'] = \
            vertexid
        return self.jobs_jobid_vertices_vertexid_subtasktimes_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_vertices_vertexid_taskmanagers_get(
        self,
        jobid,
        vertexid,
        **kwargs
    ):
        """jobs_jobid_vertices_vertexid_taskmanagers_get  # noqa: E501

        Returns task information aggregated by task manager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_vertices_vertexid_taskmanagers_get(jobid, vertexid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobVertexTaskManagersInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['vertexid'] = \
            vertexid
        return self.jobs_jobid_vertices_vertexid_taskmanagers_get_endpoint.call_with_http_info(**kwargs)

    def jobs_jobid_vertices_vertexid_watermarks_get(
        self,
        jobid,
        vertexid,
        **kwargs
    ):
        """jobs_jobid_vertices_vertexid_watermarks_get  # noqa: E501

        Returns the watermarks for all subtasks of a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_jobid_vertices_vertexid_watermarks_get(jobid, vertexid, async_req=True)
        >>> result = thread.get()

        Args:
            jobid (str): 32-character hexadecimal string value that identifies a job.
            vertexid (str): 32-character hexadecimal string value that identifies a job vertex.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MetricCollectionResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['jobid'] = \
            jobid
        kwargs['vertexid'] = \
            vertexid
        return self.jobs_jobid_vertices_vertexid_watermarks_get_endpoint.call_with_http_info(**kwargs)

    def jobs_metrics_get(
        self,
        **kwargs
    ):
        """jobs_metrics_get  # noqa: E501

        Provides access to aggregated job metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_metrics_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            get (str): Comma-separated list of string values to select specific metrics.. [optional]
            agg (str): Comma-separated list of aggregation modes which should be calculated. Available aggregations are: \"min, max, sum, avg\".. [optional]
            jobs (str): Comma-separated list of 32-character hexadecimal strings to select specific jobs.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.jobs_metrics_get_endpoint.call_with_http_info(**kwargs)

    def jobs_overview_get(
        self,
        **kwargs
    ):
        """jobs_overview_get  # noqa: E501

        Returns an overview over all jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_overview_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MultipleJobsDetails
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.jobs_overview_get_endpoint.call_with_http_info(**kwargs)

    def jobs_post(
        self,
        **kwargs
    ):
        """jobs_post  # noqa: E501

        Submits a job. This call is primarily intended to be used by the Flink client. This call expects a multipart/form-data request that consists of file uploads for the serialized JobGraph, jars and distributed cache artifacts and an attribute named \"request\" for the JSON payload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jobs_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            request (JobSubmitRequestBody): [optional]
            filename ([file_type]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobSubmitResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.jobs_post_endpoint.call_with_http_info(**kwargs)

    def overview_get(
        self,
        **kwargs
    ):
        """overview_get  # noqa: E501

        Returns an overview over the Flink cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClusterOverviewWithVersion
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.overview_get_endpoint.call_with_http_info(**kwargs)

    def savepoint_disposal_post(
        self,
        **kwargs
    ):
        """savepoint_disposal_post  # noqa: E501

        Triggers the desposal of a savepoint. This async operation would return a 'triggerid' for further query identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.savepoint_disposal_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            savepoint_disposal_request (SavepointDisposalRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TriggerResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.savepoint_disposal_post_endpoint.call_with_http_info(**kwargs)

    def savepoint_disposal_triggerid_get(
        self,
        triggerid,
        **kwargs
    ):
        """savepoint_disposal_triggerid_get  # noqa: E501

        Returns the status of a savepoint disposal operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.savepoint_disposal_triggerid_get(triggerid, async_req=True)
        >>> result = thread.get()

        Args:
            triggerid (str): 32-character hexadecimal string that identifies an asynchronous operation trigger ID. The ID was returned then the operation was triggered.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AsynchronousOperationResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['triggerid'] = \
            triggerid
        return self.savepoint_disposal_triggerid_get_endpoint.call_with_http_info(**kwargs)

    def taskmanagers_get(
        self,
        **kwargs
    ):
        """taskmanagers_get  # noqa: E501

        Returns an overview over all task managers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.taskmanagers_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskManagersInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.taskmanagers_get_endpoint.call_with_http_info(**kwargs)

    def taskmanagers_metrics_get(
        self,
        **kwargs
    ):
        """taskmanagers_metrics_get  # noqa: E501

        Provides access to aggregated task manager metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.taskmanagers_metrics_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            get (str): Comma-separated list of string values to select specific metrics.. [optional]
            agg (str): Comma-separated list of aggregation modes which should be calculated. Available aggregations are: \"min, max, sum, avg\".. [optional]
            taskmanagers (str): Comma-separated list of 32-character hexadecimal strings to select specific task managers.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.taskmanagers_metrics_get_endpoint.call_with_http_info(**kwargs)

    def taskmanagers_taskmanagerid_get(
        self,
        taskmanagerid,
        **kwargs
    ):
        """taskmanagers_taskmanagerid_get  # noqa: E501

        Returns details for a task manager. \"metrics.memorySegmentsAvailable\" and \"metrics.memorySegmentsTotal\" are deprecated. Please use \"metrics.nettyShuffleMemorySegmentsAvailable\" and \"metrics.nettyShuffleMemorySegmentsTotal\" instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.taskmanagers_taskmanagerid_get(taskmanagerid, async_req=True)
        >>> result = thread.get()

        Args:
            taskmanagerid (str): 32-character hexadecimal string that identifies a task manager.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskManagerDetailsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['taskmanagerid'] = \
            taskmanagerid
        return self.taskmanagers_taskmanagerid_get_endpoint.call_with_http_info(**kwargs)

    def taskmanagers_taskmanagerid_logs_get(
        self,
        taskmanagerid,
        **kwargs
    ):
        """taskmanagers_taskmanagerid_logs_get  # noqa: E501

        Returns the list of log files on a TaskManager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.taskmanagers_taskmanagerid_logs_get(taskmanagerid, async_req=True)
        >>> result = thread.get()

        Args:
            taskmanagerid (str): 32-character hexadecimal string that identifies a task manager.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LogListInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['taskmanagerid'] = \
            taskmanagerid
        return self.taskmanagers_taskmanagerid_logs_get_endpoint.call_with_http_info(**kwargs)

    def taskmanagers_taskmanagerid_metrics_get(
        self,
        taskmanagerid,
        **kwargs
    ):
        """taskmanagers_taskmanagerid_metrics_get  # noqa: E501

        Provides access to task manager metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.taskmanagers_taskmanagerid_metrics_get(taskmanagerid, async_req=True)
        >>> result = thread.get()

        Args:
            taskmanagerid (str): 32-character hexadecimal string that identifies a task manager.

        Keyword Args:
            get (str): Comma-separated list of string values to select specific metrics.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MetricCollectionResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['taskmanagerid'] = \
            taskmanagerid
        return self.taskmanagers_taskmanagerid_metrics_get_endpoint.call_with_http_info(**kwargs)

    def taskmanagers_taskmanagerid_thread_dump_get(
        self,
        taskmanagerid,
        **kwargs
    ):
        """taskmanagers_taskmanagerid_thread_dump_get  # noqa: E501

        Returns the thread dump of the requested TaskManager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.taskmanagers_taskmanagerid_thread_dump_get(taskmanagerid, async_req=True)
        >>> result = thread.get()

        Args:
            taskmanagerid (str): 32-character hexadecimal string that identifies a task manager.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ThreadDumpInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['taskmanagerid'] = \
            taskmanagerid
        return self.taskmanagers_taskmanagerid_thread_dump_get_endpoint.call_with_http_info(**kwargs)

